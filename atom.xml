<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Talk ☯ Me]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://khalily.github.io//"/>
  <updated>2015-07-31T02:41:41.355Z</updated>
  <id>http://khalily.github.io//</id>
  
  <author>
    <name><![CDATA[khalily]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Sublime Text 2 配置分享]]></title>
    <link href="http://khalily.github.io/2015/07/30/sublime-config/"/>
    <id>http://khalily.github.io/2015/07/30/sublime-config/</id>
    <published>2015-07-29T16:00:00.000Z</published>
    <updated>2015-07-31T02:41:41.355Z</updated>
    <content type="html"><![CDATA[<h2 id="安装_Package_Control_的方法：">安装 Package Control 的方法：</h2><ul>
<li>打开 Sublime Text 2，按下 Control + 调出 Console</li>
<li>将以下代码粘贴进命令行中并回车：  <figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path<span class="params">()</span>; os.makedirs<span class="params">( ipp )</span> <span class="keyword">if</span> not os.path.exists<span class="params">(ipp)</span> <span class="keyword">else</span> None; urllib2.install_opener<span class="params">( urllib2.build_opener<span class="params">( urllib2.ProxyHandler<span class="params">( )</span>)</span>)</span>; open<span class="params">( os.path.join<span class="params">( ipp, pf)</span>, 'wb' )</span>.write<span class="params">( urllib2.urlopen<span class="params">( 'http://sublime.wbond.net/' +pf.replace<span class="params">( ' ','%<span class="number">20</span>' )</span>)</span>.read<span class="params">()</span>)</span>; print<span class="params">( 'Please restart Sublime Text to finish installation')</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="SublimeClang_的使用">SublimeClang 的使用</h2><ul>
<li>提供C/C++/object-c等语言的代码提示和浏览功能</li>
<li>Control + Shift + P 呼出控制界面 输入 install, 然后 Enter</li>
<li>输入SublimeClang, Enter</li>
<li><p>打开 SublimeClang 的 user-setting 文件, 添加</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">additional_language_options</span>":</span><br><span class="line">    <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">c++</span>" : <span class="value">[<span class="string">"-std=c++11"</span>] // enable C++<span class="number">11</span></span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">options</span>":</span><br><span class="line">    <span class="value">[</span><br><span class="line">        <span class="string">"-Wno-deprecated-declarations"</span>,</span><br><span class="line">        <span class="string">"-isystem"</span>, <span class="string">"/usr/include"</span>,</span><br><span class="line">        <span class="string">"-isystem"</span>, <span class="string">"/usr/include/c++/*"</span>,</span><br><span class="line">        <span class="string">"-Wall"</span></span><br><span class="line">    ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是单独的项目，在项目文件中添加</p>
  <figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"settings"</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">"sublimeclang_options"</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">"-I/home/wyang/workspace/muduo"</span>,</span><br><span class="line">        <span class="comment">"-I/home/wyang/workspace/muduo/**"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>记得在build文件中添加–std=c++11使Build&amp;Run功能生效</p>
</li>
</ul>
<h2 id="GoSublime">GoSublime</h2><ul>
<li>提供go语言的coding环境, very good!</li>
<li>同上安装就行</li>
</ul>
<h2 id="SublimeGDB">SublimeGDB</h2><ul>
<li>gdb的一个插件，可以用来简单调试</li>
<li>同上安装</li>
<li><p>在项目文件中添加</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"settings"</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"sublimegdb_commandline"</span>: <span class="string">"gdb --interpreter=mi ./contains"</span>,</span><br><span class="line">    <span class="string">"sublimegdb_workingdir"</span>: <span class="string">"<span class="variable">$&#123;folder:$&#123;project_path:contains.cc&#125;</span>&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意在build文件中加入-g（调试）选项</p>
</li>
</ul>
<h2 id="SublimeCodeIntel">SublimeCodeIntel</h2><ul>
<li>多种语言的代码提示功能</li>
<li>打开 SublimeCodeIntel 的 user-setting 文件, 添加  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">codeintel_config</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">Python</span>": <span class="value">&#123;</span><br><span class="line">            "<span class="attribute">env</span>": <span class="value">&#123;</span><br><span class="line">                "<span class="attribute">PYTHONPATH</span>": <span class="value"><span class="string">"/usr/lib/python2.7/site-packages:/usr/lib/python:$PYTHONPATH"</span></span><br><span class="line">            </span>&#125;</span><br><span class="line">        </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="有用的一些插件">有用的一些插件</h2><h3 id="ConvertToUTF8">ConvertToUTF8</h3><ul>
<li>可以避免在windows中打开包含gbk编码的文件时生成<strong>.dump</strong>文件</li>
<li>需要卸载 GBK Encoding Support 插件</li>
</ul>
<h3 id="SublimeLinter">SublimeLinter</h3><ul>
<li>高亮不规范的python代码</li>
</ul>
<h3 id="Bracket_Highlighter">Bracket Highlighter</h3><ul>
<li><p>默认配置文件的 <code>&quot;bracket_styles&quot;</code> 的 <code>&quot;default&quot;</code> 的<code>&quot;color&quot;</code>改为</p>
  <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>: <span class="string">"entity.name.class"</span>  <span class="comment">// green</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="个人设置文件">个人设置文件</h2><ul>
<li><p>自己的一些设置</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">color_scheme</span>": <span class="value"><span class="string">"Packages/Color Scheme - Default/Monokai.tmTheme"</span></span>,</span><br><span class="line">    "<span class="attribute">default_line_ending</span>": <span class="value"><span class="string">"unix"</span></span>,</span><br><span class="line">    "<span class="attribute">dictionary</span>": <span class="value"><span class="string">"Packages/Language - English/en_US.dic"</span></span>,</span><br><span class="line">    "<span class="attribute">ensure_newline_at_eof_on_save</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">fade_fold_buttons</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">font_face</span>": <span class="value"><span class="string">"monaco"</span></span>,</span><br><span class="line">    "<span class="attribute">font_size</span>": <span class="value"><span class="number">12</span></span>,</span><br><span class="line">    "<span class="attribute">highlight_line</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">highlight_modified_tabs</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">ignored_packages</span>":</span><br><span class="line">    <span class="value">[</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">open_files_in_new_window</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">reparse_use_dirty_buffer</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">tab_size</span>": <span class="value"><span class="number">2</span></span>,</span><br><span class="line">    "<span class="attribute">translate_tabs_to_spaces</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">trim_trailing_white_space_on_save</span>": <span class="value"><span class="literal">true</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装_Package_Control_的方法：">安装 Package Control 的方法：</h2><ul>
<li>打开 Sublime Text 2，按下 Control + 调出 Console</li>
<li>将以下代码粘贴进命令行中并回车：  <]]>
    </summary>
    
      <category term="ide" scheme="http://khalily.github.io/tags/ide/"/>
    
      <category term="sublime" scheme="http://khalily.github.io/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 使用札记]]></title>
    <link href="http://khalily.github.io/2015/07/29/git-use/"/>
    <id>http://khalily.github.io/2015/07/29/git-use/</id>
    <published>2015-07-28T16:00:00.000Z</published>
    <updated>2015-07-30T11:20:23.302Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_git_subtree">1. git subtree</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># git <span class="keyword">subtree </span>提示不支持该命令时</span><br><span class="line"><span class="label">sudo</span> chmod +x /usr/share/doc/git/contrib/<span class="keyword">subtree/git-subtree.sh</span><br><span class="line"></span><span class="label">sudo</span> ln -s /usr/share/doc/git/contrib/<span class="keyword">subtree/git-subtree.sh </span>/usr/lib/git-core/git-<span class="keyword">subtree</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加仓库并fetch</span></span><br><span class="line">git remote add -f <span class="variable">&lt;子仓库名&gt;</span> <span class="variable">&lt;子仓库地址&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上--squash 表示合并子仓库的所有提交为一次提交（感觉不加好些，可以看日志记录）</span></span><br><span class="line">git subtree add --prefix=<span class="variable">&lt;子目录名&gt;</span> <span class="variable">&lt;子仓库名&gt;</span> <span class="variable">&lt;分支&gt;</span> --squash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程子仓库同步</span></span><br><span class="line">git subtree pull --prefix=<span class="variable">&lt;子目录名&gt;</span> <span class="variable">&lt;远程分支&gt;</span> <span class="variable">&lt;分支&gt;</span> --squash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向远程子仓库推送</span></span><br><span class="line">git subtree push --prefix=<span class="variable">&lt;子目录名&gt;</span> <span class="variable">&lt;远程分支名&gt;</span> 分支</span><br></pre></td></tr></table></figure>
<h3 id="2-_git_submodule">2. git submodule</h3><p>注意： submodule 只能在&lt;子目录&gt;下看到log信息，如果需要在web UI 下看log 需要对&lt;子仓库地址&gt;可访问<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加子仓库</span></span><br><span class="line">git submodule add <span class="variable">&lt;子仓库地址&gt;</span> <span class="variable">&lt;子目录名&gt;</span></span><br><span class="line"><span class="comment"># 删除子仓库</span></span><br><span class="line">git submodule rm <span class="variable">&lt;子目录名&gt;</span></span><br><span class="line"><span class="comment"># 同步子仓库</span></span><br><span class="line">git submoudle update</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_git_subtree">1. git subtree</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><b]]>
    </summary>
    
      <category term="git" scheme="http://khalily.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang面向对象之--二叉表达式树]]></title>
    <link href="http://khalily.github.io/2013/06/06/binary-expression-tree/"/>
    <id>http://khalily.github.io/2013/06/06/binary-expression-tree/</id>
    <published>2013-06-06T00:00:00.000Z</published>
    <updated>2015-07-30T08:55:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="运行效果">运行效果</h2><pre><code>$ ./expression-tree

Input Expression:     [<span class="number">1</span> + <span class="number">23</span> * <span class="number">1</span> - <span class="number">12</span> * ( <span class="number">4</span> + <span class="number">2</span> * <span class="number">5</span> )]
Caculate Result:     -<span class="number">144</span>
Prefix Expression:     - + <span class="number">1</span> * <span class="number">23</span> <span class="number">1</span> * <span class="number">12</span> + <span class="number">4</span> * <span class="number">2</span> <span class="number">5</span>
Nifix Expression:     <span class="number">1</span> + <span class="number">23</span> * <span class="number">1</span> - <span class="number">12</span> * <span class="number">4</span> + <span class="number">2</span> * <span class="number">5</span>      <span class="comment">//带括号的情况下 这里有bug</span>
Suffix Expression:     <span class="number">1</span> <span class="number">23</span> <span class="number">1</span> * + <span class="number">12</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> * + * -
</code></pre><h2 id="一个简单的结构图">一个简单的结构图</h2><p><img src="imgs/expression-tree.png" alt="expression-tree"></p>
<h2 id="关于面向对象">关于面向对象</h2><ol>
<li><p>用<code>interface</code>定义方法</p>
<p> type BinaryTree interface {</p>
<pre><code><span class="function"><span class="title">setLeft</span><span class="params">(node Node)</span></span>
<span class="function"><span class="title">setRight</span><span class="params">(node Node)</span></span>
<span class="function"><span class="title">PrefixExpression</span><span class="params">()</span></span> string
<span class="function"><span class="title">SuffixExpression</span><span class="params">()</span></span> string
<span class="function"><span class="title">NifixExpression</span><span class="params">()</span></span> string
</code></pre><p> }</p>
</li>
<li><p>用<code>struct</code>管理数据</p>
<p> type OperateNode struct {</p>
<pre><code>operate <span class="built_in">string</span>
<span class="built_in">left</span>    Node
<span class="built_in">right</span>   Node
</code></pre><p> }</p>
</li>
<li><p>需要改变对象定义指针类型的方法</p>
<p> func (on *OperateNode) setLeft(node Node) {</p>
<pre><code><span class="function_start"><span class="keyword">on</span>.<span class="title">left</span></span> = node
</code></pre><p> }</p>
</li>
<li><p>不需要改变对象则定义对象类型的方法</p>
<p> func (on OperateNode) getName() string {</p>
<pre><code><span class="command">return</span> <span class="function_start"><span class="keyword">on</span>.<span class="title">operate</span></span> + <span class="string">" "</span>
</code></pre><p> }</p>
</li>
<li><p>赋值给接口用指针类型总是正确的</p>
<p> func CreateOperateNode(v string) (node BinaryTree) {</p>
<pre><code><span class="keyword">switch</span> v {
<span class="keyword">case</span> <span class="string">"+"</span>:
    <span class="keyword">return</span> &amp;Add{OperateNode{<span class="string">"+"</span>, <span class="constant">nil</span>, <span class="constant">nil</span>}}
<span class="keyword">case</span> <span class="string">"-"</span>:
    <span class="keyword">return</span> &amp;Subtraction{OperateNode{<span class="string">"-"</span>, <span class="constant">nil</span>, <span class="constant">nil</span>}}

...
</code></pre></li>
</ol>
<h2 id="代码在这里">代码在<a href="https://github.com/khalily/ExpressionTree" target="_blank" rel="external">这里</a></h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="运行效果">运行效果</h2><pre><code>$ ./expression-tree

Input Expression:     [<span class="number">1</span> + <span class="number">23</span>]]>
    </summary>
    
      <category term="二叉树" scheme="http://khalily.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="go" scheme="http://khalily.github.io/categories/go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[知乎笔试]]></title>
    <link href="http://khalily.github.io/2013/06/04/zhihu-test/"/>
    <id>http://khalily.github.io/2013/06/04/zhihu-test/</id>
    <published>2013-06-04T00:00:00.000Z</published>
    <updated>2015-07-30T08:24:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="知乎笔试题">知乎笔试题</h1><h2 id="过滤html标签">过滤html标签</h2><p>假设在一个文本编辑器中允许使用富文本，但只允许使用以下html标签和属性，</p>
<pre><code><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span> <span class="attribute">title</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">abbr</span> <span class="attribute">title</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">acronym</span> <span class="attribute">title</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">b</span>&gt;</span>
<span class="tag">&lt;<span class="title">blockquote</span> <span class="attribute">cite</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">cite</span>&gt;</span> <span class="tag">&lt;<span class="title">code</span>&gt;</span> <span class="tag">&lt;<span class="title">del</span> <span class="attribute">datetime</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">em</span>&gt;</span> <span class="tag">&lt;<span class="title">i</span>&gt;</span> <span class="tag">&lt;<span class="title">q</span>
<span class="attribute">cite</span>=<span class="value">""</span>&gt;</span> <span class="tag">&lt;<span class="title">strike</span>&gt;</span> <span class="tag">&lt;<span class="title">strong</span>&gt;</span>  <span class="tag">&lt;<span class="title">pre</span>&gt;</span>
</code></pre><p>编写一个过滤器，对任意输入的文本进行过滤，输出符合要求的富文本</p>
<p>代码如下：</p>
<pre><code><span class="comment">#!/usr/bin/python env</span>
<span class="comment">#coding: utf8</span>

<span class="keyword">from</span> BeautifulSoup <span class="keyword">import</span> BeautifulSoup

html = <span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\
&lt;p id="firstpara" align="center"&gt;This is paragraph &lt;b&gt;one&lt;/b&gt;.\
&lt;script type="text/javascript"&gt;"only test";&lt;/script&gt;\
&lt;a href="" title="" onclick=""&gt;test&lt;/a&gt;\
&lt;p id="secondpara" align="blah"&gt;This is paragraph &lt;b&gt;two&lt;/b&gt;.&lt;/html&gt;'</span>

<span class="comment"># &lt;a href="" title=""&gt; &lt;abbr title=""&gt; &lt;acronym title=""&gt; &lt;b&gt;</span>
<span class="comment"># &lt;blockquote cite=""&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=""&gt; &lt;em&gt; &lt;i&gt; &lt;q</span>
<span class="comment"># cite=""&gt; &lt;strike&gt; &lt;strong&gt;  &lt;pre&gt;</span>

WHITE_LIST = {<span class="string">'a'</span>: {<span class="string">'href'</span>: <span class="string">'*'</span>, <span class="string">'title'</span>: <span class="string">'*'</span>}, <span class="string">'abbr'</span>: {<span class="string">'title'</span>: <span class="string">'*'</span>},
              <span class="string">'acronym'</span>: {<span class="string">'title'</span>: <span class="string">'*'</span>}, <span class="string">'b'</span>: {}, <span class="string">'blockquote'</span>: {<span class="string">'cite'</span>: <span class="string">'*'</span>},
              <span class="string">'cite'</span>: {}, <span class="string">'code'</span>: {}, <span class="string">'i'</span>: {}, <span class="string">'del'</span>: {<span class="string">'datetime'</span>: <span class="string">'*'</span>},
              <span class="string">'em'</span>: {}, <span class="string">'q'</span>: {<span class="string">'cite'</span>: <span class="string">'*'</span>}, <span class="string">'strike'</span>: {}, <span class="string">'strong'</span>: {},
              <span class="string">'pre'</span>: {}}


<span class="function"><span class="keyword">def</span> <span class="title">parseHtml</span><span class="params">(html)</span>:</span>
    soup = BeautifulSoup(html)
    <span class="keyword">for</span> tag <span class="keyword">in</span> soup.findAll(<span class="keyword">True</span>):
        <span class="keyword">if</span> tag.name <span class="keyword">not</span> <span class="keyword">in</span> WHITE_LIST:
            tag.hidden = <span class="keyword">True</span>
        <span class="keyword">else</span>:
            attr_rules = WHITE_LIST[tag.name]
            <span class="keyword">for</span> attr_name, attr_value <span class="keyword">in</span> tag.attrs:
                <span class="keyword">if</span> attr_name <span class="keyword">not</span> <span class="keyword">in</span> attr_rules:
                    <span class="keyword">del</span> tag[attr_name]

    <span class="keyword">return</span> soup.renderContents()


<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    <span class="keyword">print</span> parseHtml(html)
</code></pre><h2 id="假设给你一个月的日志，格式如下：">假设给你一个月的日志，格式如下：</h2><pre><code>[I <span class="number">130403</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">40</span>] <span class="number">1</span> <span class="number">200</span> GET /question/<span class="number">123</span> (<span class="number">8.8</span><span class="number">.9</span><span class="number">.9</span>) <span class="number">200.39</span>ms
[I <span class="number">130403</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">90</span>] <span class="number">1</span> <span class="number">200</span> GET /topic/<span class="number">456</span> (<span class="number">8.8</span><span class="number">.9</span><span class="number">.9</span>) <span class="number">300.85</span>ms
[I <span class="number">130403</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">90</span>] <span class="number">1</span> <span class="number">200</span> POST /answer/<span class="number">789</span> (<span class="number">8.8</span><span class="number">.9</span><span class="number">.9</span>) <span class="number">300.85</span>ms
...
</code></pre><p>方括号中依次是：级别，日期，时间，后面依次是用户id，返回码，访问方式，访问路径，用户ip，响应时间</p>
<p>日志文件名格式为：年-月-日-小时.log，如：2013-01-01-18.log，共30*24个文件。</p>
<p>写个程序，算出一个用户列表同时符合以下两个要求：</p>
<ol>
<li>这些用户每天都会访问（GET）/topic/<em>**这个路径至少两次（</em>代表数字）</li>
<li>这些用户每天访问（GET）的/topic/<em>*</em>路径中，至少会包含两个不同的路径（后面的数字不一样）</li>
</ol>
<p>再算出一个路径列表满足:<br>每天都被以上用户中至少两个用户访问</p>
<h2 id="实现思路：">实现思路：</h2><ul>
<li>先把一个月的30*24个文件名分天存储在一个filepaths_one_month列表 [[filepaths_one_day], …]</li>
<li>然后算出每一天符合要求的用户访问的路径列表 user_dict_day {user_id: [path, …]} 和 符合要求的被访问路径的用户列表<br>path_dict_day {path: [user_id, …]}</li>
<li><p>然后把每天的user_dict_day的keys 求交集，求出每天都访问的用户，再用其为key, 找到这些用户访问的路径列表交集不为空的user_id, 即为要求1的答案user_list，接下来则对path_dict_day进行相同的操作，得出每天都被至少两个用户访问的路径列表，最后再用访问这些路径的用户列表与要求1求出的用户列表求交集，得出使交集不为空的path_list.</p>
</li>
<li><p>需要说明一点，日志文件的年、月、日都在test()函数设置，然后在当前文件夹寻找日志文件，日志的小时范围为00点-23点(而不是01点-24点)。为了一些可读性，包含了一些较冗余的代码，不过代码不多，相信影响不大。</p>
</li>
</ul>
<p>代码如下：</p>
<pre><code>#!/usr/bin/env python
#coding: utf8

import re

log_keys = [
    'user_id',
    'return_code',
    'access_way',
    'access_path',
    'ip_address',
    'time'
]


class Find(object):
    def __init__(self, days, month, year):
        self.filepaths_one_month = self.file_paths(days, month, year)
        # for filepaths_day in self.filepaths_one_month:
        #     for filepath in filepaths_day:
        #         print filepath
        self.user_dict_month = {}       # {user_id: {path, ...}}
        self.path_dict_month = {}       # {path: {user_id, ...}}

    def find_one_month(self):
        user_dict_pre_day, path_dict_pre_day = self.find_one_day(self.filepaths_one_month[<span class="operator">0])
        <span class="keyword">for</span> filepaths_one_day <span class="keyword">in</span> <span class="keyword">self</span>.filepaths_one_month[<span class="number">1</span>:]:
            user_dict_day, path_dict_day = <span class="keyword">self</span>.find_one_day(filepaths_one_day)
            user_set = <span class="keyword">set</span>(user_dict_day.<span class="keyword">keys</span>()) &amp; <span class="keyword">set</span>(user_dict_pre_day.<span class="keyword">keys</span>())
            <span class="keyword">for</span> user_id <span class="keyword">in</span> user_set:
                path_set = <span class="keyword">set</span>(user_dict_day[user_id]) &amp; <span class="keyword">set</span>(user_dict_pre_day[user_id])
                <span class="keyword">if</span> <span class="keyword">len</span>(path_set) &gt; <span class="number">0</span>:
                    <span class="keyword">self</span>.user_dict_month[user_id] = path_set
            user_dict_pre_day = <span class="keyword">self</span>.user_dict_month

            path_set = <span class="keyword">set</span>(path_dict_day.<span class="keyword">keys</span>()) &amp; <span class="keyword">set</span>(path_dict_pre_day.<span class="keyword">keys</span>())
            <span class="keyword">for</span> <span class="keyword">path</span> <span class="keyword">in</span> path_set:
                user_set = <span class="keyword">set</span>(path_dict_day[<span class="keyword">path</span>]) &amp; <span class="keyword">set</span>(path_dict_pre_day[<span class="keyword">path</span>])
                <span class="keyword">self</span>.path_dict_month[<span class="keyword">path</span>] = user_set
            path_dict_pre_day = <span class="keyword">self</span>.path_dict_month

        user_list = <span class="keyword">self</span>.user_dict_month.<span class="keyword">keys</span>()
        path_list = []

        <span class="keyword">for</span> <span class="keyword">path</span> <span class="keyword">in</span> <span class="keyword">self</span>.path_dict_month.<span class="keyword">keys</span>():
            <span class="keyword">if</span> <span class="keyword">len</span>(<span class="keyword">self</span>.path_dict_month[<span class="keyword">path</span>] &amp; <span class="keyword">set</span>(user_list)) &gt; <span class="number">0</span>:
                path_list.append(<span class="keyword">path</span>)

        <span class="keyword">return</span> user_list, path_list

    <span class="keyword">def</span> file_paths(<span class="keyword">self</span>, <span class="keyword">days</span>, <span class="keyword">month</span>, <span class="keyword">year</span>):
        filepaths = []
        <span class="keyword">for</span> <span class="keyword">day</span> <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="keyword">days</span>+<span class="number">1</span>):
            filepaths_day = []
            <span class="keyword">for</span> <span class="keyword">hour</span> <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">24</span>):
                temppath = <span class="string">"%2d-%2d-%2d-%2d.log"</span> % (<span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="keyword">hour</span>)
                filepaths_day.append(temppath.<span class="keyword">replace</span>(<span class="string">' '</span>, <span class="string">'0'</span>))
            filepaths.append(filepaths_day)
        <span class="keyword">return</span> filepaths

    <span class="keyword">def</span> find_one_day(<span class="keyword">self</span>, filepaths):
        user_dict = {}          # {user_id: {<span class="keyword">path</span>: times}}
        user_dict_day = {}      # {user_id: [<span class="keyword">path</span>, ...]}
        path_dict = {}          # {<span class="keyword">path</span>: {user_id: times}}
        path_dict_day = {}      # {<span class="keyword">path</span>: [user_id, ...]}

        <span class="keyword">for</span> filepath <span class="keyword">in</span> filepaths:
            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="keyword">file</span>(filepath).readlines():
                <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">self</span>.is_get_and_topic(line):
                    continue
                log_dict = <span class="keyword">self</span>.parser_line(line)

                user_id = log_dict[<span class="string">'user_id'</span>]
                <span class="keyword">path</span> = log_dict[<span class="string">'access_path'</span>]
                <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> user_dict:
                    user_dict[user_id] = {}
                <span class="keyword">if</span> <span class="keyword">path</span> <span class="keyword">not</span> <span class="keyword">in</span> user_dict[user_id]:
                    user_dict[user_id][<span class="keyword">path</span>] = <span class="number">1</span>
                <span class="keyword">else</span>:
                    user_dict[user_id][<span class="keyword">path</span>] = user_dict[user_id][<span class="keyword">path</span>] + <span class="number">1</span>

                <span class="keyword">if</span> <span class="keyword">path</span> <span class="keyword">not</span> <span class="keyword">in</span> path_dict:
                    path_dict[<span class="keyword">path</span>] = {}
                <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> path_dict[<span class="keyword">path</span>]:
                    path_dict[<span class="keyword">path</span>][user_id] = <span class="number">1</span>
                <span class="keyword">else</span>:
                    path_dict[<span class="keyword">path</span>][user_id] = path_dict[<span class="keyword">path</span>][user_id] + <span class="number">1</span>

        <span class="keyword">for</span> user_id <span class="keyword">in</span> user_dict.<span class="keyword">keys</span>():
            <span class="keyword">for</span> <span class="keyword">path</span> <span class="keyword">in</span> user_dict[user_id].<span class="keyword">keys</span>():
                <span class="keyword">if</span> user_dict[user_id][<span class="keyword">path</span>] &gt;= <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">len</span>(user_dict[user_id].<span class="keyword">keys</span>()) &gt;= <span class="number">2</span>:
                    <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> user_dict_day:
                        user_dict_day[user_id] = []
                    user_dict_day[user_id].append(<span class="keyword">path</span>)
        # print <span class="string">'user_dict_day:'</span>, user_dict_day

        <span class="keyword">for</span> <span class="keyword">path</span> <span class="keyword">in</span> path_dict.<span class="keyword">keys</span>():
            <span class="keyword">for</span> user_id <span class="keyword">in</span> path_dict[<span class="keyword">path</span>].<span class="keyword">keys</span>():
                <span class="keyword">if</span> path_dict[<span class="keyword">path</span>][user_id] &gt;= <span class="number">2</span>:
                    <span class="keyword">if</span> <span class="keyword">path</span> <span class="keyword">not</span> <span class="keyword">in</span> path_dict_day:
                        path_dict_day[<span class="keyword">path</span>] = []
                    path_dict_day[<span class="keyword">path</span>].append(user_id)
        # print <span class="string">'path_dict_day:'</span>, path_dict_day

        <span class="keyword">return</span> user_dict_day, path_dict_day

    <span class="keyword">def</span> parser_line(<span class="keyword">self</span>, <span class="keyword">str</span>):
        log_list = <span class="keyword">str</span>[(<span class="keyword">str</span>.find(<span class="string">']'</span>)+<span class="number">2</span>):].<span class="keyword">split</span>(<span class="string">' '</span>)
        log_dict = {}
        <span class="keyword">for</span> <span class="keyword">index</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">0</span>, <span class="keyword">len</span>(log_list)):
            log_dict[log_keys[<span class="keyword">index</span>]] = log_list[<span class="keyword">index</span>]
        # <span class="keyword">for</span> <span class="keyword">key</span>, <span class="keyword">value</span> <span class="keyword">in</span> log_dict.items():
        #     print <span class="keyword">key</span>, <span class="keyword">value</span>
        <span class="keyword">return</span> log_dict

    <span class="keyword">def</span> is_get_and_topic(<span class="keyword">self</span>, <span class="keyword">str</span>):
        <span class="keyword">if</span> re.<span class="keyword">search</span>(<span class="string">'GET /topic/[0-9]+'</span>, <span class="keyword">str</span>):
            <span class="keyword">return</span> <span class="literal">True</span>
        <span class="keyword">return</span> <span class="literal">False</span>


<span class="keyword">def</span> <span class="keyword">test</span>():
    <span class="keyword">days</span> = <span class="number">30</span>        # 一个月的天数
    <span class="keyword">year</span> = <span class="number">2013</span>
    <span class="keyword">month</span> = <span class="number">1</span>
    <span class="keyword">test</span> = Find(<span class="keyword">days</span>, <span class="keyword">month</span>, <span class="keyword">year</span>)
    user_list, path_list = <span class="keyword">test</span>.find_one_month()

    print <span class="string">'user_list:'</span>, user_list
    print <span class="string">'path_list:'</span>, path_list

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    <span class="keyword">test</span>()</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="知乎笔试题">知乎笔试题</h1><h2 id="过滤html标签">过滤html标签</h2><p>假设在一个文本编辑器中允许使用富文本，但只允许使用以下html标签和属性，</p>
<pre><code><span class="tag">&lt;<span ]]>
    </summary>
    
      <category term="知乎" scheme="http://khalily.github.io/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="python" scheme="http://khalily.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 golang 实现的计算器]]></title>
    <link href="http://khalily.github.io/2013/06/03/caculate-of-go/"/>
    <id>http://khalily.github.io/2013/06/03/caculate-of-go/</id>
    <published>2013-06-03T00:00:00.000Z</published>
    <updated>2015-07-30T08:54:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="功能支持">功能支持</h2><ul>
<li>简单四则运算</li>
<li>优先级支持</li>
<li>小括号支持</li>
</ul>
<h2 id="简单演示">简单演示</h2><pre><code>$ ./caculator
Please input express:
<span class="number">1</span>+<span class="number">2</span>*<span class="number">1</span>-<span class="number">12</span>+<span class="number">2</span>-(<span class="number">1</span>+<span class="number">2</span>*<span class="number">3</span>)
[<span class="number">1</span> + <span class="number">2</span> * <span class="number">1</span> - <span class="number">12</span> + <span class="number">2</span> - ( <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> )]      <span class="comment">//中缀表达式</span>
[<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> * + <span class="number">12</span> - <span class="number">2</span> + <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> * + -]            <span class="comment">//后缀表达式</span>
-<span class="number">14</span>                                        <span class="comment">//结果</span>
</code></pre><h2 id="实现流程">实现流程</h2><p><img src="imgs/caculate.png" alt="caculate.png"></p>
<h2 id="后缀到前缀的转换">后缀到前缀的转换</h2><pre><code>func pre2stuf<span class="params">(exps []string)</span> <span class="params">(exps2 []string)</span> {
    list1 := list.New<span class="params">()</span>
    list2 := list.New<span class="params">()</span>

    <span class="keyword">for</span> _, <span class="built_in">exp</span> := range exps {
        <span class="keyword">if</span> isOperate<span class="params">(exp)</span> {
            <span class="keyword">if</span> op, ok := isPop<span class="params">(list1, exp)</span>; ok {
                <span class="keyword">for</span> _, s := range op {
                    list2.PushBack<span class="params">(s)</span>
                }
            }
            <span class="keyword">if</span> <span class="built_in">exp</span> == <span class="string">")"</span> {
                continue
            }
            list1.PushBack<span class="params">(exp)</span>
        } <span class="keyword">else</span> {
            list2.PushBack<span class="params">(exp)</span>
        }
    }

    <span class="keyword">for</span> cur := list1.Back<span class="params">()</span>; cur <span class="built_in">!</span>= nil; cur = cur.Prev<span class="params">()</span> {
        list2.PushBack<span class="params">(cur.Value)</span>
    }

    <span class="keyword">for</span> cur := list2.Front<span class="params">()</span>; cur <span class="built_in">!</span>= nil; cur = cur.Next<span class="params">()</span> {
        <span class="keyword">if</span> curValue, ok := cur.Value.<span class="params">(string)</span>; ok {
            exps2 = append<span class="params">(exps2, curValue)</span>
        }
    }
    return
}
</code></pre><h2 id="代码在这里">代码在<a href="https://github.com/khalily/caculator" target="_blank" rel="external">这里</a></h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="功能支持">功能支持</h2><ul>
<li>简单四则运算</li>
<li>优先级支持</li>
<li>小括号支持</li>
</ul>
<h2 id="简单演示">简单演示</h2><pre><code>$ ./caculator
Please input]]>
    </summary>
    
      <category term="go" scheme="http://khalily.github.io/categories/go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Go语言实现的一个端口扫描器--gscan]]></title>
    <link href="http://khalily.github.io/2013/05/31/gscan/"/>
    <id>http://khalily.github.io/2013/05/31/gscan/</id>
    <published>2013-05-31T00:00:00.000Z</published>
    <updated>2015-07-30T08:22:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="程序功能参数">程序功能参数</h2><pre><code>Usage of ./gscan:
  -h=<span class="string">"help"</span>: help doc
  -ip=<span class="string">"127.0.0.1"</span>: IP range of scan. Example:
        <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>
        <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>, <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>
        <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>-<span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>
  -p=<span class="string">"1-1024"</span>: Port range of scan. Example:
        <span class="number">135</span>
        <span class="number">135</span>, <span class="number">445</span>, <span class="number">3389</span>
        <span class="number">1</span>-<span class="number">1024</span>
  -w=<span class="string">"connect"</span>: Way of scan. Expample
        connect
        syn
        fin
</code></pre><h2 id="实现思想">实现思想</h2><p>一个端口一个<code>goroutine</code>，用一个<code>chanel</code>接收所有<code>goroutine</code>返回的扫描结果</p>
<h2 id="代码在这里">代码在<a href="https://github.com/khalily/gscan" target="_blank" rel="external">这里</a></h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="程序功能参数">程序功能参数</h2><pre><code>Usage of ./gscan:
  -h=<span class="string">"help"</span>: help doc
  -ip=<span class="string">"127.0.]]>
    </summary>
    
      <category term="go" scheme="http://khalily.github.io/tags/go/"/>
    
      <category term="go" scheme="http://khalily.github.io/categories/go/"/>
    
  </entry>
  
</feed>